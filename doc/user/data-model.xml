<!DOCTYPE section [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink">
<title>Dynamic data model</title>
<para>
  Tarantool data is organized in <emphasis>tuples</emphasis>. Tuple
  length is varying: a tuple can contain any number
  of fields. A field can be either numeric &mdash;
  32- or 64- bit unsigned integer, or binary
  string &mdash; a sequence of octets.  Fields included into the
  first index are always assumed to be the identifying (unique)
  key. The remaining fields make up a value, associated with the
  key.
  Tuple sets are called <emphasis>spaces<alt>perhaps, not the best name</alt></emphasis>, and there can be up to 255 spaces defined per
  one Tarantool instance.

  Apart from the primary key, it is possible to define secondary
  <emphasis>indexes</emphasis> on other tuple fields. A secondary index does
  not have to be unique, and can cover several fields.
  If a space has a secondary index, the total number of fields in
  a tuple must be at least equal to the ordinal number of the
  field participating in the index.
</para>
<para>
  Currently, entire server <emphasis>schema</emphasis> must be
  specified in the configuration file. The schema contains all
  spaces and indexes. A server started with a configuration
  file that doesn't match contents of its data directory will most
  likely crash, but may also behave in a non-defined way. 
  It is, however, possible to stop the server,
  add new spaces to the schema or temporarily disable
  existing spaces, and then restart the server.
</para>
<para>
  Schema objects, such as spaces and indexes, are referred to
  by a numeric id. For example, to insert a tuple, it is necessary
  to provide id of the destination space; to select
  a tuple, one must provide the identifying key, space id and
  index id of the index used for lookup.
</para>

<para>
  The configuration file shipped with the binary package defines
  only one space with id <literal>0</literal>. It has no keys
  other than the primary. The primary key numeric id is also 
  <literal>0</literal>. Tarantool command line client
  supports a small subset of SQL, and we'll use it to demonstrate
  supported data manipulation commands:
  <programlisting>
  localhost> insert into t0 values (1)
  Insert OK, 1 row affected
  localhost> select * from t0 where k0=1
  Found 1 tuple:
  [1]
  localhost> insert into t0 values ('hello')
  An error occurred: ER_ILLEGAL_PARAMS, 'Illegal parameters'
  localhost> replace into t0 values (1, 'hello')
  Replace OK, 1 row affected
  localhost> select * from t0 where k0=1 
  Found 1 tuple:
  [1, 'hello']
  localhost> update t0 set k1='world' where k0=1
  Update OK, 1 row affected
  localhost> select * from t0 where k0=1
  Found 1 tuple:
  [1, 'world']
  localhost> delete from t0 where k0=1
  Delete OK, 1 row affected
  localhost> select * from t0 where k0=1
  No match</programlisting>

  <itemizedlist>
    <title>Please observe:</title>
    <listitem><para>
      Since all object identifiers are numeric, Tarantool SQL subset
      expects identifiers that end with a number (<literal>t0</literal>,
      <literal>k0</literal>, <literal>k1</literal>, and so on):
      this number is used to refer to the actual space or
      index.
    </para></listitem>
    <listitem><para>
       All commands actually tell the server which key/value pair
       to change. In SQL terms, that means that all DML statements
       must be qualified with the primary key. WHERE clause
       is, therefore, mandatory.
    </para></listitem>
    <listitem><para>
       REPLACE replaces data when a
       tuple with given primary key already exists. Such replace
       can insert a tuple with a different number of fields.
    </para></listitem>
  </itemizedlist>
</para>
<para>
  Additional examples of SQL statements can be found in <citetitle
  xlink:href="https://github.com/mailru/tarantool/tree/master/test/box"
  xlink:title="Tarantool regression test suite">Tarantool
  regression test suite</citetitle>. A complete grammar of
  supported SQL is provided in <olink targetdoc="tarantool-user-guide" targetptr="language-reference">Language reference</olink> chapter.
</para>
<para>
  Since not all NoSQL operations can be expressed in SQL, to gain
  complete access to data manipulation functionality one must use
  a <olink targetptr="connectors">Perl, Python, Ruby or C connector</olink>. The client/server protocol
  is open and documented: an annotated BNF can be found in the
  source tree, file <filename
  xlink:href="https://github.com/mailru/tarantool/blob/master/doc/box-protocol.txt" xlink:title="A complete BNF of Tarantool client/server protocol">doc/protocol.txt</filename>.
</para>

</section>
<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
