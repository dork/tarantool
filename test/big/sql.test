# encoding: tarantool
#
sql.sort = True

print """#
# A test case for Bug#729758
# "SELECT fails with a disjunct and small LIMIT"
# https://bugs.launchpad.net/tarantool/+bug/729758
#"""

exec sql "insert into t0 values ('Doe', 'Richard')"
exec sql "insert into t0 values ('Roe', 'Richard')"
exec sql "insert into t0 values ('Woe', 'Richard')"
exec sql "insert into t0 values ('Major', 'Tomas')"
exec sql "insert into t0 values ('Kytes', 'Tomas')"
exec sql "select * from t0 where k1='Richard' or k1='Tomas' or k1='Tomas' limit 5"

print """#
# A test case for Bug#729879
# "Zero limit is treated the same as no limit"
# https://bugs.launchpad.net/tarantool/+bug/729879
#"""
exec sql "select * from t0 where k1='Richard' or k1='Tomas' limit 0"

# Cleanup
exec sql "delete from t0 where k0='Doe'"
exec sql "delete from t0 where k0='Roe'"
exec sql "delete from t0 where k0='Woe'"
exec sql "delete from t0 where k0='Major'"
exec sql "delete from t0 where k0='Kytes'"

print """#
# A test case for Bug#730593
# "Bad data if incomplete tuple"
# https://bugs.launchpad.net/tarantool/+bug/730593
# Verify that if there is an index on, say, field 2,
# we can't insert tuples with cardinality 1 and
# get away with it.
#"""
exec sql "insert into t0 values ('Britney')"
exec sql "select * from t0 where k1='Anything'"
exec sql "insert into t0 values ('Stephanie')"
exec sql "select * from t0 where k1='Anything'"
exec sql "insert into t0 values ('Spears', 'Britney')"
exec sql "select * from t0 where k0='Spears'"
exec sql "select * from t0 where k1='Anything'"
exec sql "select * from t0 where k1='Britney'"
exec sql "call box.select_range(0, 0, 100, 'Spears')"
exec sql "call box.select_range(0, 1, 100, 'Britney')"
exec sql "delete from t0 where k0='Spears'"
print """#
# Test composite keys with trees
#"""
exec sql "insert into t1 values ('key1', 'part1', 'part2')"
# Test a duplicate insert on unique index that once resulted in a crash (bug #926080)
exec sql "replace into t1 values ('key1', 'part1', 'part2')"
exec sql "insert into t1 values ('key2', 'part1', 'part2_a')"
exec sql "insert into t1 values ('key3', 'part1', 'part2_b')"
exec admin "lua for k, v in box.space[1]:pairs() do print(v) end"
exec sql "select * from t1 where k0='key1'"
exec sql "select * from t1 where k0='key2'"
exec sql "select * from t1 where k0='key3'"
exec sql "select * from t1 where k1='part1'"
exec sql "call box.select_range(1, 1, 100, 'part1')"
exec sql "call box.select_range(1, 0, 100, 'key2')"
exec sql "call box.select_range(1, 1, 100, 'part1', 'part2_a')"
# check non-unique multipart keys
exec sql "insert into t5 values ('01234567', 'part1', 'part2')"
exec sql "insert into t5 values ('11234567', 'part1', 'part2')"
exec sql "insert into t5 values ('21234567', 'part1', 'part2_a')"
exec sql "insert into t5 values ('31234567', 'part1_a', 'part2')"
exec sql "insert into t5 values ('41234567', 'part1_a', 'part2_a')"
exec admin "lua for k, v in box.space[5]:pairs() do print(v) end"
exec sql "select * from t5 where k0='01234567'"
exec sql "select * from t5 where k0='11234567'"
exec sql "select * from t5 where k0='21234567'"
exec sql "select * from t5 where k1='part1'"
exec sql "select * from t5 where k1='part1_a'"
exec sql "select * from t5 where k1='part_none'"
exec sql "call box.select('5', '1', 'part1', 'part2')"
exec sql "insert into t7 values (1, 'hello')"
exec sql "insert into t7 values (2, 'brave')"
exec sql "insert into t7 values (3, 'new')"
exec sql "insert into t7 values (4, 'world')"
# Check how build_idnexes() works
server.stop()
server.start()
print """#
# Bug#929654 - secondary hash index is not built with build_indexes()
#"""
exec sql "select * from t7 where k1='hello'"
exec sql "select * from t7 where k1='brave'"
exec sql "select * from t7 where k1='new'"
exec sql "select * from t7 where k1='world'"
exec admin "lua box.space[7]:truncate()"
exec sql "select * from t1 where k0='key1'"
exec sql "select * from t1 where k0='key2'"
exec sql "select * from t1 where k0='key3'"
exec sql "select * from t1 where k1='part1'"
exec sql "delete from t1 where k0='key1'"
exec sql "delete from t1 where k0='key2'"
exec sql "delete from t1 where k0='key3'"
exec sql "select * from t5 where k1='part1'"
exec sql "select * from t5 where k1='part2'"
# check incomplete keys
exec sql "delete from t5 where k0=1"
exec sql "delete from t5 where k0=2"
# cleanup
exec sql "delete from t5 where k0='01234567'"
exec sql "delete from t5 where k0='11234567'"
exec sql "delete from t5 where k0='21234567'"
exec sql "delete from t5 where k0='31234567'"
exec sql "delete from t5 where k0='41234567'"
exec admin "lua for k, v in box.space[5]:pairs() do print(v) end"

print """
#
# A test case for: http://bugs.launchpad.net/bugs/735140
# Partial REPLACE corrupts index.
#
"""
# clean data and restart with appropriate config

exec sql "insert into t4 values ('Spears', 'Britney')"
exec sql "select * from t4 where k0='Spears'"
exec sql "select * from t4 where k1='Britney'"
# try to insert the incoplete tuple
exec sql "replace into t4 values ('Spears')"
# check that nothing has been updated
exec sql "select * from t4 where k0='Spears'"
# cleanup
exec sql "delete from t4 where k0='Spears'"

#
# Test retrieval of duplicates via a secondary key
#
exec sql "insert into t4 values (1, 'duplicate one')"
exec sql "insert into t4 values (2, 'duplicate one')"
exec sql "insert into t4 values (3, 'duplicate one')"
exec sql "insert into t4 values (4, 'duplicate one')"
exec sql "insert into t4 values (5, 'duplicate one')"
exec sql "insert into t4 values (6, 'duplicate two')"
exec sql "insert into t4 values (7, 'duplicate two')"
exec sql "insert into t4 values (8, 'duplicate two')"
exec sql "insert into t4 values (9, 'duplicate two')"
exec sql "insert into t4 values (10, 'duplicate two')"
exec sql "insert into t4 values (11, 'duplicate three')"
exec sql "insert into t4 values (12, 'duplicate three')"
exec sql "insert into t4 values (13, 'duplicate three')"
exec sql "insert into t4 values (14, 'duplicate three')"
exec sql "insert into t4 values (15, 'duplicate three')"
exec sql "select * from t4 where k1='duplicate one'"
exec sql "select * from t4 where k1='duplicate two'"
exec sql "select * from t4 where k1='duplicate three'"
exec sql "delete from t4 where k0=1"
exec sql "delete from t4 where k0=2"
exec sql "delete from t4 where k0=3"
exec sql "delete from t4 where k0=4"
exec sql "delete from t4 where k0=5"
exec sql "delete from t4 where k0=6"
exec sql "delete from t4 where k0=7"
exec sql "delete from t4 where k0=8"
exec sql "delete from t4 where k0=9"
exec sql "delete from t4 where k0=10"
exec sql "delete from t4 where k0=11"
exec sql "delete from t4 where k0=12"
exec sql "delete from t4 where k0=13"
exec sql "delete from t4 where k0=14"
exec sql "delete from t4 where k0=15"
#
# Check min() and max() functions
#
exec sql "insert into t4 values(1, 'Aardvark ')"
exec sql "insert into t4 values(2, 'Bilimbi')"
exec sql "insert into t4 values(3, 'Creature ')"
exec admin "lua for k, v in box.space[4]:pairs() do print(v) end"
exec admin "lua box.space[4].index[0].idx:min()"
exec admin "lua box.space[4].index[0].idx:max()"
exec admin "lua box.space[4].index[1].idx:min()"
exec admin "lua box.space[4].index[1].idx:max()"
exec sql "delete from t4 where k0=1"
exec sql "delete from t4 where k0=2"
exec sql "delete from t4 where k0=3"

sql.sort = False
# vim: syntax=python
